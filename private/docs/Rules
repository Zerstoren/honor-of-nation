Зависимлости частей кода и их организация. Правила.

0) Маршрутизация:
    В application/config/router.ini записаны все правила маршрутизации

    0. Слева пишется принимающий адресс, а справа обрабатывающий контроллер

    1. Ставим комментарии над блоками, ради понимаю куда это ведет

    2. Маршруты контроллеры записываются в следующем виде:
        - System - Файл контроллера
        - Main - Класс контроллера
        - get - метод класса

    3. Именование происходит следующим образом. Имя файла должно заканчиваться на Controller.py, в итоге это будет выгля
        деть как SystemController.py, но в маршруте мы пишем только первую часть System. Такая-же схема и с классами.

1) Контроллеры:
    0. Контроллеры делятся на типы: Main, Model, Collection, Delivery, Private Celery.
        Main - контроллеры общего назначения, не связанные с каким-то конкретным действием
        Model - контроллеры используются для загрузки данных модели клиентом
        Collection - контроллер используется для загрузки группы данных коллекции клиентом
        Delivery - контроллер ничего не примают, а только отправляют данные на клиентов используя forceSend
        PrivateCelery - контроллер служит для обработки задач Celery

    1. Методы контроллера имеют произвольное имя, но обязательные аргументы.
        - transfer - это объект связи с пользователем. Через него можно получить модель юзера который отправил это
            сообщение и это будет достоверная информация, на которую можно опиратсья
        - data - это словарь, который передал клиент для обработки сервером

    2. Контроллеры никогда не вызывают модели, ничего не обрабатывают. Их задача вызвать нужный сервис с декорацией,
        передать данные от клиента в первозданном виде.

    3. Контроллер может обратится к models/ModelName/Common для получения констант, но не более

    4. Все контроллеры кроме Delivery и Celery отправляют данные через метод трансфера send и ни как иначе и только
        Delivery обязан отправлять данные через forceSend

2) Сервисы:
    0. Сервисы служат для обрабокти информации и являются ключевой точкой для работы с базой и обработки поступающих данных.
        т.е. бизнес логики

    1. Сервис никогда не вызывает модели, которые на прямую с этим сервисом не связаны, за исключением Common, который
        декларативным

    2. Сервисы не вызывают друг-друга для получения моделей, доменов и других данных. Сервис вызывает сразу фабрику

    3. Если сервис привязан к модели или моделям, то через него должны быть получены данные

3) Модель
    0. Модель - это группа функциональных элементов завязаных на одной из коллекций в БД

    1. В модель входят элементы:
        - Фабрика - система слияния доменов и сырых данных маппера
        - Домен - интерфейс адаптер для сырых данных
        - Маппер - система доступа к БД
        - Коммон - файл констант этой коллекции
        - Могут присутствовать другие элементы, как например информацинная система или математика

4) Фабрика
    0. Задача фабрики - быть связующим звеном между доменом и маппером и генерировать новые домены

    1. Если стоит задача получить какой-то домен, то это должно делаться через фабрику

    2. Никто кроме фабрик не имеет права создавать домены.

    3. Фабрика служит источником всех готовых данных. Сервисы могут возвращать домены, только как побочный продукт или
        данные обязательные для отправки клиенту.

5) Домен
    0. Классы, которые содержат данные и управляют их изменениями, если таковые требутются.

6) Маппер
    0. Задача маппера совершать запросы к базе данных исключительно к своей коллекции БД

    1. Маппер запрещено вызывать с других мест, кроме как фабрики

    2. Маппер в качестве аргументов может принимать либо скалярный тип или домен, но никаких сложных составных объектов

    3. В маппер встроена система фильтров запроса, которая должна находится только в маппере

6) Коммон
    0. Содержит исключительно константные значения

